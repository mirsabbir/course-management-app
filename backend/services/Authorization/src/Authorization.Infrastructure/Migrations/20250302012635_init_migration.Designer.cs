// <auto-generated />
using System;
using Authorization.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Authorization.Infrastructure.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250302012635_init_migration")]
    partial class init_migration
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Authorization.Domain.Invitation", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(100)
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)");

                    b.Property<DateTime>("ExpirationDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("Token")
                        .IsUnique();

                    b.ToTable("Invitations", (string)null);
                });

            modelBuilder.Entity("Authorization.Domain.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "2e17f50a-9541-4731-951f-a6755db80eeb",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adcsdcsdc25d1fv5fd",
                            DateOfBirth = new DateTime(1995, 2, 1, 18, 0, 0, 0, DateTimeKind.Utc),
                            Email = "olivier@example.com",
                            EmailConfirmed = true,
                            FullName = "Olivier Lefebvre",
                            LockoutEnabled = false,
                            NormalizedEmail = "OLIVIER@EXAMPLE.COM",
                            NormalizedUserName = "OLIVIER@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELr4vn3sYT19MRAC6PLUCFsUlE3dwda1bvoZkZ5V77adz4c6yC/aP474PPeHx6UXnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bhdbcvhdbchdbhjkbs15c1sdf51",
                            TwoFactorEnabled = false,
                            UserName = "olivier@example.com"
                        },
                        new
                        {
                            Id = "3e3c9543-d97c-4332-b177-850073f90d01",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adcsdcsdc25d1fv5fd",
                            DateOfBirth = new DateTime(1995, 2, 1, 18, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mahamud@example.com",
                            EmailConfirmed = true,
                            FullName = "Mahamud Shahjahan",
                            LockoutEnabled = false,
                            NormalizedEmail = "MAHAMUD@EXAMPLE.COM",
                            NormalizedUserName = "MAHAMUD@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELr4vn3sYT19MRAC6PLUCFsUlE3dwda1bvoZkZ5V77adz4c6yC/aP474PPeHx6UXnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bhdbcvhdbchdbhjkbs15c1sdf51",
                            TwoFactorEnabled = false,
                            UserName = "mahamud@example.com"
                        },
                        new
                        {
                            Id = "de454825-5ab5-429b-b573-f39342ee72c1",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adcsdcsdc25d1fv5fd",
                            DateOfBirth = new DateTime(1995, 2, 1, 18, 0, 0, 0, DateTimeKind.Utc),
                            Email = "andrew@example.com",
                            EmailConfirmed = true,
                            FullName = "Andrew Crawley",
                            LockoutEnabled = false,
                            NormalizedEmail = "ANDREW@EXAMPLE.COM",
                            NormalizedUserName = "ANDREW@EXAMPLE.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELr4vn3sYT19MRAC6PLUCFsUlE3dwda1bvoZkZ5V77adz4c6yC/aP474PPeHx6UXnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bhdbcvhdbchdbhjkbs15c1sdf51",
                            TwoFactorEnabled = false,
                            UserName = "andrew@example.com"
                        },
                        new
                        {
                            Id = "833420e4-2b6c-4db4-9a5e-14b52f38133d",
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "adcsdcsdc25d1fv5fd",
                            DateOfBirth = new DateTime(1995, 2, 1, 18, 0, 0, 0, DateTimeKind.Utc),
                            Email = "mirsabbiralam@gmail.com",
                            EmailConfirmed = true,
                            FullName = "Mir Sabbir",
                            LockoutEnabled = false,
                            NormalizedEmail = "MIRSABBIRALAM@GMAIL.COM",
                            NormalizedUserName = "MIRSABBIRALAM@GMAIL.COM",
                            PasswordHash = "AQAAAAIAAYagAAAAELr4vn3sYT19MRAC6PLUCFsUlE3dwda1bvoZkZ5V77adz4c6yC/aP474PPeHx6UXnw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "bhdbcvhdbchdbhjkbs15c1sdf51",
                            TwoFactorEnabled = false,
                            UserName = "mirsabbiralam@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "8c17cdd1-aaaa-4ffc-9931-619bb6760b8b",
                            Name = "Staff",
                            NormalizedName = "STAFF"
                        },
                        new
                        {
                            Id = "426df999-5b23-4fe1-807b-4730a91bf85c",
                            Name = "Student",
                            NormalizedName = "STUDENT"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = "2e17f50a-9541-4731-951f-a6755db80eeb",
                            RoleId = "8c17cdd1-aaaa-4ffc-9931-619bb6760b8b"
                        },
                        new
                        {
                            UserId = "3e3c9543-d97c-4332-b177-850073f90d01",
                            RoleId = "8c17cdd1-aaaa-4ffc-9931-619bb6760b8b"
                        },
                        new
                        {
                            UserId = "de454825-5ab5-429b-b573-f39342ee72c1",
                            RoleId = "8c17cdd1-aaaa-4ffc-9931-619bb6760b8b"
                        },
                        new
                        {
                            UserId = "833420e4-2b6c-4db4-9a5e-14b52f38133d",
                            RoleId = "8c17cdd1-aaaa-4ffc-9931-619bb6760b8b"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Authorization.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Authorization.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Authorization.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Authorization.Domain.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
